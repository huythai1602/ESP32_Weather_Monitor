/*
 * H·ªá Th·ªëng Gi√°m S√°t v√† D·ª± B√°o M√¥i Tr∆∞·ªùng Th√¥ng Minh D·ª±a tr√™n IoT v√† Tr√≠ Tu·ªá Nh√¢n T·∫°o
 * (IoT-based Smart Environmental Monitoring and Prediction System with Artificial Intelligence)
 * 
 * M√¥ t·∫£:
 * - S·ª≠ d·ª•ng ESP32 v√† DHT11 ƒë·ªÉ ƒë·ªçc nhi·ªát ƒë·ªô v√† ƒë·ªô ·∫©m
 * - L·∫•y d·ªØ li·ªáu d·ª± b√°o t·ª´ OpenWeather API
 * - D·ª± ƒëo√°n nhi·ªát ƒë·ªô v√† ƒë·ªô ·∫©m trong t∆∞∆°ng lai b·∫±ng m√¥ h√¨nh AI
 * - C·∫£nh b√°o b·∫±ng ƒë√®n LED khi d·ª± ƒëo√°n v∆∞·ª£t ng∆∞·ª°ng
 * - L∆∞u tr·ªØ d·ªØ li·ªáu tr√™n Google Sheets
 */

#include <WiFi.h>
#include <WiFiClientSecure.h>
#include <HTTPClient.h>
#include <ArduinoJson.h>
#include "DHT.h"
#include "time.h"
#include "model_coef.h"  // File header ch·ª©a h·ªá s·ªë m√¥ h√¨nh AI

// ƒê·ªãnh nghƒ©a ch√¢n k·∫øt n·ªëi
#define DHTPIN 23     // Ch√¢n k·∫øt n·ªëi DHT11
#define DHTTYPE DHT11
#define LED_PIN 2     // Ch√¢n k·∫øt n·ªëi LED

// Ng∆∞·ª°ng c·∫£nh b√°o
#define TEMP_THRESHOLD 27.0  // Ng∆∞·ª°ng nhi·ªát ƒë·ªô (27¬∞C)
#define HUM_THRESHOLD 30.0   // Ng∆∞·ª°ng ƒë·ªô ·∫©m (30%)

// Th√¥ng tin WiFi
const char* ssid = "HUY_THAI";
const char* password = "Huythai2003";

// Th√¥ng tin NTP Server ƒë·ªÉ l·∫•y th·ªùi gian
const char* ntpServer = "pool.ntp.org";
const long gmtOffset_sec = 7 * 3600; // GMT+7 (Vi·ªát Nam)
const int daylightOffset_sec = 0;

// OpenWeather API
const char* apiKey = "ae437f23c1997a658605be5235d3d7e2";
const char* city = "Hanoi";
const char* country = "VN";
const char* units = "metric";

// Google Sheets API
const char* scriptUrl = "https://script.google.com/macros/s/AKfycbz8PNvMcZhqdUdaxWj70VaNGPWxSBVm7Mjy8tR4bnS7IsYa7bN47Or58cw_LgGqFf_EpQ/exec";

// Bi·∫øn to√†n c·ª•c
float last_t_dht = 0;
float last_h_dht = 0;
float last_t_api = 0;
float last_h_api = 0;
float predicted_temp = 0;
float predicted_hum = 0;
float prev_t_dht = 0;  // Gi√° tr·ªã tr∆∞·ªõc ƒë√≥ ƒë·ªÉ t√≠nh bi·∫øn thi√™n
float prev_h_dht = 0;

// Bi·∫øn l∆∞u tr·ªØ lags (cho d·ªØ li·ªáu lag3 n·∫øu c·∫ßn)
float temp_dht_lag3 = 0;
float hum_dht_lag3 = 0;

// Bi·∫øn tr·∫°ng th√°i
unsigned long lastSendTime = 0;
unsigned long lastPredictTime = 0;
unsigned long lastBlinkTime = 0;
unsigned long lastApiTime = 0;
unsigned long lastReadTime = 0;

const unsigned long READ_INTERVAL = 10000;     // 10 gi√¢y
const unsigned long API_INTERVAL = 300000;     // 5 ph√∫t
const unsigned long SEND_INTERVAL = 60000;     // 1 ph√∫t
const unsigned long PREDICT_INTERVAL = 60000;  // 1 ph√∫t

bool ledState = false;
bool isPredictedAlert = false;

// Bi·∫øn ƒë·∫øm d·ªØ li·ªáu ƒë√£ ghi
int dataCount = 0;

// Buffer ƒë·ªÉ l∆∞u tr·ªØ c√°c gi√° tr·ªã tr∆∞·ªõc ƒë√≥ l√†m lag
#define MAX_HISTORY 5
float temp_history[MAX_HISTORY] = {0};
float hum_history[MAX_HISTORY] = {0};
int history_index = 0;

// Kh·ªüi t·∫°o DHT
DHT dht(DHTPIN, DHTTYPE);

void setup() {
  // Kh·ªüi t·∫°o Serial
  Serial.begin(115200);
  delay(1000);  // ƒê·ª£i Serial ·ªïn ƒë·ªãnh
  
  // Hi·ªÉn th·ªã th√¥ng tin kh·ªüi ƒë·ªông
  Serial.println("\n=================================================");
  Serial.println("  H·ªá Th·ªëng Gi√°m S√°t v√† D·ª± B√°o M√¥i Tr∆∞·ªùng Th√¥ng Minh");
  Serial.println("=================================================");
  
  // Kh·ªüi t·∫°o ch√¢n GPIO
  pinMode(LED_PIN, OUTPUT);
  digitalWrite(LED_PIN, LOW);  // T·∫Øt LED l√∫c kh·ªüi ƒë·ªông
  
  // Kh·ªüi t·∫°o c·∫£m bi·∫øn
  dht.begin();
  Serial.println("‚úì ƒê√£ kh·ªüi t·∫°o c·∫£m bi·∫øn DHT11");
  
  // K·∫øt n·ªëi WiFi
  connectWiFi();
  
  // C·∫•u h√¨nh th·ªùi gian
  configTime(gmtOffset_sec, daylightOffset_sec, ntpServer);
  Serial.println("‚úì ƒê√£ c·∫•u h√¨nh NTP");
  
  // Ki·ªÉm tra th·ªùi gian
  struct tm timeinfo;
  if(getLocalTime(&timeinfo)){
    Serial.print("Th·ªùi gian hi·ªán t·∫°i: ");
    Serial.println(&timeinfo, "%A, %d %B %Y %H:%M:%S");
  } else {
    Serial.println("‚ö†Ô∏è Ch∆∞a ƒë·ªìng b·ªô ƒë∆∞·ª£c th·ªùi gian");
  }
  
  // Hi·ªÉn th·ªã th√¥ng tin v·ªÅ m√¥ h√¨nh AI
  Serial.println("\n=== TH√îNG TIN M√î H√åNH AI ===");
  Serial.printf("S·ªë l∆∞·ª£ng ƒë·∫∑c tr∆∞ng: %d\n", NUM_FEATURES);
  Serial.println("H·ªá s·ªë m√¥ h√¨nh nhi·ªát ƒë·ªô:");
  Serial.printf("- Intercept: %.4f\n", temp_intercept);
  Serial.println("H·ªá s·ªë m√¥ h√¨nh ƒë·ªô ·∫©m:");
  Serial.printf("- Intercept: %.4f\n", hum_intercept);
  
  // Hi·ªÉn th·ªã ng∆∞·ª°ng c·∫£nh b√°o
  Serial.println("\n=== NG∆Ø·ª†NG C·∫¢NH B√ÅO ===");
  Serial.printf("Nhi·ªát ƒë·ªô: %.1f¬∞C\n", TEMP_THRESHOLD);
  Serial.printf("ƒê·ªô ·∫©m: %.1f%%\n", HUM_THRESHOLD);
  
  // Nh·∫•p nh√°y LED ƒë·ªÉ th√¥ng b√°o kh·ªüi ƒë·ªông th√†nh c√¥ng
  for (int i = 0; i < 3; i++) {
    digitalWrite(LED_PIN, HIGH);
    delay(100);
    digitalWrite(LED_PIN, LOW);
    delay(100);
  }
  
  Serial.println("\n‚úì Kh·ªüi ƒë·ªông h·ªá th·ªëng ho√†n t·∫•t");
  Serial.println("=================================================");
}

void loop() {
  // Ki·ªÉm tra k·∫øt n·ªëi WiFi v√† k·∫øt n·ªëi l·∫°i n·∫øu m·∫•t k·∫øt n·ªëi
  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("üì° M·∫•t k·∫øt n·ªëi WiFi, ƒëang k·∫øt n·ªëi l·∫°i...");
    connectWiFi();
  }
  
  // ƒê·ªçc d·ªØ li·ªáu t·ª´ c·∫£m bi·∫øn theo chu k·ª≥
  unsigned long currentMillis = millis();
  if (currentMillis - lastReadTime >= READ_INTERVAL) {
    readSensorData();
    lastReadTime = currentMillis;
  }
  
  // L·∫•y d·ªØ li·ªáu API theo chu k·ª≥
  if (currentMillis - lastApiTime >= API_INTERVAL) {
    getWeatherData();
    lastApiTime = currentMillis;
  }
  
  // D·ª± ƒëo√°n theo chu k·ª≥
  if (currentMillis - lastPredictTime >= PREDICT_INTERVAL && dht_ready() && api_ready()) {
    predictWeather();
    lastPredictTime = currentMillis;
  }
  
  // G·ª≠i d·ªØ li·ªáu l√™n Sheets theo chu k·ª≥
  if (currentMillis - lastSendTime >= SEND_INTERVAL && dht_ready() && api_ready()) {
    sendToSheets(last_t_dht, last_h_dht, last_t_api, last_h_api, predicted_temp, predicted_hum);
    lastSendTime = currentMillis;
  }
  
  // X·ª≠ l√Ω ƒë√®n LED
  handleLED();
  
  // ƒê·ª£i m·ªôt kho·∫£ng th·ªùi gian ng·∫Øn tr∆∞·ªõc khi l·∫∑p l·∫°i
  delay(100);
}

// Ki·ªÉm tra xem d·ªØ li·ªáu DHT ƒë√£ s·∫µn s√†ng ch∆∞a
bool dht_ready() {
  return !isnan(last_t_dht) && !isnan(last_h_dht);
}

// Ki·ªÉm tra xem d·ªØ li·ªáu API ƒë√£ s·∫µn s√†ng ch∆∞a
bool api_ready() {
  return !isnan(last_t_api) && !isnan(last_h_api);
}

// C·∫≠p nh·∫≠t l·ªãch s·ª≠ d·ªØ li·ªáu
void updateDataHistory(float temp, float hum) {
  // C·∫≠p nh·∫≠t v·ªã tr√≠ trong m·∫£ng l·ªãch s·ª≠
  history_index = (history_index + 1) % MAX_HISTORY;
  
  // L∆∞u gi√° tr·ªã hi·ªán t·∫°i v√†o l·ªãch s·ª≠
  temp_history[history_index] = temp;
  hum_history[history_index] = hum;
  
  // C·∫≠p nh·∫≠t gi√° tr·ªã lag3 (3 m·∫´u tr∆∞·ªõc)
  int lag3_index = (history_index + MAX_HISTORY - 3) % MAX_HISTORY;
  temp_dht_lag3 = temp_history[lag3_index];
  hum_dht_lag3 = hum_history[lag3_index];
  
  // N·∫øu gi√° tr·ªã l√† 0 (ch∆∞a c√≥ d·ªØ li·ªáu), s·ª≠ d·ª•ng gi√° tr·ªã hi·ªán t·∫°i
  if (temp_dht_lag3 == 0) temp_dht_lag3 = temp;
  if (hum_dht_lag3 == 0) hum_dht_lag3 = hum;
}

// ƒê·ªçc d·ªØ li·ªáu t·ª´ c·∫£m bi·∫øn DHT11
void readSensorData() {
  // L∆∞u gi√° tr·ªã tr∆∞·ªõc ƒë√≥
  prev_t_dht = last_t_dht;
  prev_h_dht = last_h_dht;
  
  // ƒê·ªçc gi√° tr·ªã m·ªõi
  float t = dht.readTemperature();
  float h = dht.readHumidity();
  
  if (isnan(t) || isnan(h)) {
    Serial.println("‚ùå Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c DHT11");
  } else {
    last_t_dht = t;
    last_h_dht = h;
    
    // C·∫≠p nh·∫≠t l·ªãch s·ª≠ d·ªØ li·ªáu
    updateDataHistory(t, h);
    
    Serial.printf("üìä DHT11: %.1f¬∞C, %.1f%%\n", t, h);
  }
}

// K·∫øt n·ªëi WiFi
void connectWiFi() {
  WiFi.begin(ssid, password);
  Serial.print("üì° K·∫øt n·ªëi WiFi");
  
  unsigned long startAttemptTime = millis();
  while (WiFi.status() != WL_CONNECTED && millis() - startAttemptTime < 10000) {
    Serial.print(".");
    delay(500);
  }
  
  if (WiFi.status() == WL_CONNECTED) {
    Serial.println();
    Serial.println("‚úì ƒê√£ k·∫øt n·ªëi WiFi!");
    Serial.print("IP: ");
    Serial.println(WiFi.localIP());
  } else {
    Serial.println();
    Serial.println("‚ùå Kh√¥ng k·∫øt n·ªëi ƒë∆∞·ª£c WiFi. S·∫Ω th·ª≠ l·∫°i sau.");
  }
}

// L·∫•y d·ªØ li·ªáu t·ª´ OpenWeather API
void getWeatherData() {
  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("‚ùå Kh√¥ng c√≥ k·∫øt n·ªëi WiFi ƒë·ªÉ l·∫•y d·ªØ li·ªáu API");
    return;
  }
  
  HTTPClient http;
  WiFiClient client;
  http.setTimeout(10000);  // 10 gi√¢y timeout
  
  String url = "http://api.openweathermap.org/data/2.5/weather?q=" + String(city) + "," + String(country) +
               "&appid=" + apiKey + "&units=" + units;
  
  http.begin(client, url);
  Serial.println("üåê ƒêang l·∫•y d·ªØ li·ªáu th·ªùi ti·∫øt t·ª´ API...");
  int httpCode = http.GET();
  
  if (httpCode == 200) {
    String payload = http.getString();
    StaticJsonDocument<1024> doc;
    DeserializationError error = deserializeJson(doc, payload);
    
    if (!error) {
      last_t_api = doc["main"]["temp"];
      last_h_api = doc["main"]["humidity"];
      Serial.printf("üåê API: %.1f¬∞C, %.1f%%\n", last_t_api, last_h_api);
      
      // Hi·ªÉn th·ªã th√™m th√¥ng tin th·ªùi ti·∫øt n·∫øu c√≥
      if (doc.containsKey("weather") && doc["weather"].size() > 0) {
        const char* description = doc["weather"][0]["description"];
        Serial.printf("üåê ƒêi·ªÅu ki·ªán th·ªùi ti·∫øt: %s\n", description);
      }
    } else {
      Serial.println("‚ùå L·ªói gi·∫£i m√£ JSON: " + String(error.c_str()));
    }
  } else {
    Serial.printf("‚ùå L·ªói API: %d\n", httpCode);
  }
  
  http.end();
}

// G·ª≠i d·ªØ li·ªáu l√™n Google Sheets
bool sendToSheets(float t_dht, float h_dht, float t_api, float h_api, float t_pred, float h_pred) {
  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("‚ùå Kh√¥ng c√≥ k·∫øt n·ªëi WiFi ƒë·ªÉ g·ª≠i d·ªØ li·ªáu");
    return false;
  }
  
  // TƒÉng b·ªô ƒë·∫øm d·ªØ li·ªáu
  dataCount++;
  
  WiFiClientSecure client;
  client.setInsecure();  // B·ªè qua x√°c minh ch·ª©ng ch·ªâ SSL
  
  HTTPClient http;
  http.setTimeout(15000);  // 15 gi√¢y timeout
  
  // T·∫°o URL v·ªõi d·ªØ li·ªáu
  String url = String(scriptUrl);
  url += "?temp_dht=" + String(t_dht, 2);
  url += "&hum_dht=" + String(h_dht, 2);
  url += "&temp_api=" + String(t_api, 2);
  url += "&hum_api=" + String(h_api, 2);
  url += "&temp_pred=" + String(t_pred, 2);
  url += "&hum_pred=" + String(h_pred, 2);
  url += "&status=" + String(isPredictedAlert ? "WARNING" : "NORMAL");
  url += "&nocache=" + String(random(100000));  // NgƒÉn cache
  
  http.begin(client, url);
  Serial.printf("üì§ G·ª≠i d·ªØ li·ªáu l√™n Google Sheets (#%d)...\n", dataCount);
  
  int httpCode = http.GET();
  bool success = false;
  
  if (httpCode > 0) {
    String payload = http.getString();
    Serial.printf("‚úì ƒê√£ g·ª≠i d·ªØ li·ªáu, HTTP code: %d\n", httpCode);
    if (httpCode == 200) {
      Serial.println("‚úì Ph·∫£n h·ªìi: " + payload);
      success = true;
    }
  } else {
    Serial.printf("‚ùå G·ª≠i Google Sheets l·ªói: %d\n", httpCode);
    Serial.println("‚ùå L·ªói: " + http.errorToString(httpCode));
  }
  
  http.end();
  return success;
}

// D·ª± ƒëo√°n nhi·ªát ƒë·ªô v√† ƒë·ªô ·∫©m d·ª±a tr√™n m√¥ h√¨nh AI v·ªõi chu·∫©n h√≥a d·ªØ li·ªáu
void predictWeather() {
  // Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o
  if (isnan(last_t_dht) || isnan(last_h_dht) || isnan(last_t_api) || isnan(last_h_api) ||
      isnan(prev_t_dht) || isnan(prev_h_dht)) {
    Serial.println("‚ùå D·ªØ li·ªáu ƒë·∫ßu v√†o kh√¥ng h·ª£p l·ªá cho d·ª± ƒëo√°n");
    return;
  }
  
  // L·∫•y th·ªùi gian hi·ªán t·∫°i
  struct tm timeinfo;
  if (!getLocalTime(&timeinfo)) {
    Serial.println("‚ùå Kh√¥ng l·∫•y ƒë∆∞·ª£c th·ªùi gian");
    return;
  }
  
  // Chu·∫©n b·ªã c√°c ƒë·∫∑c tr∆∞ng g·ªëc
  float raw_features[NUM_FEATURES];
  
  // G√°n gi√° tr·ªã theo th·ª© t·ª± ƒë·∫∑c tr∆∞ng nh∆∞ trong file model_coef.h
  // ƒê·∫£m b·∫£o th·ª© t·ª± ph·∫£i kh·ªõp v·ªõi m√¥ h√¨nh ƒë√£ hu·∫•n luy·ªán!
  
  // X√°c ƒë·ªãnh th·ª© t·ª± ƒë·∫∑c tr∆∞ng d·ª±a tr√™n comment trong model_coef.h
  // temp_api, hum_api, temp_dht_lag1, temp_dht_lag3, hum_dht_lag1, hum_dht_lag3, 
  // temp_dht_diff, hum_dht_diff, temp_diff_dht_api, hum_diff_dht_api
  raw_features[0] = last_t_api;                   // temp_api
  raw_features[1] = last_h_api;                   // hum_api
  raw_features[2] = prev_t_dht;                   // temp_dht_lag1
  raw_features[3] = temp_dht_lag3;                // temp_dht_lag3
  raw_features[4] = prev_h_dht;                   // hum_dht_lag1
  raw_features[5] = hum_dht_lag3;                 // hum_dht_lag3
  raw_features[6] = last_t_dht - prev_t_dht;      // temp_dht_diff
  raw_features[7] = last_h_dht - prev_h_dht;      // hum_dht_diff
  raw_features[8] = last_t_dht - last_t_api;      // temp_diff_dht_api
  raw_features[9] = last_h_dht - last_h_api;      // hum_diff_dht_api
  
  // Hi·ªÉn th·ªã c√°c ƒë·∫∑c tr∆∞ng g·ªëc
  Serial.println("\nüî¢ ƒê·∫∑c tr∆∞ng g·ªëc:");
  for (int i = 0; i < NUM_FEATURES; i++) {
    Serial.printf("  - ƒê·∫∑c tr∆∞ng %d: %.2f\n", i, raw_features[i]);
  }
  
  // Chu·∫©n h√≥a c√°c ƒë·∫∑c tr∆∞ng
  float features[NUM_FEATURES];
  for (int i = 0; i < NUM_FEATURES; i++) {
    features[i] = (raw_features[i] - feature_means[i]) / feature_scales[i];
  }
  
  // Hi·ªÉn th·ªã c√°c ƒë·∫∑c tr∆∞ng ƒë√£ chu·∫©n h√≥a
  Serial.println("üßÆ ƒê·∫∑c tr∆∞ng chu·∫©n h√≥a:");
  for (int i = 0; i < NUM_FEATURES; i++) {
    Serial.printf("  - ƒê·∫∑c tr∆∞ng %d: %.2f\n", i, features[i]);
  }
  
  // D·ª± ƒëo√°n nhi·ªát ƒë·ªô
  predicted_temp = temp_intercept;
  for (int i = 0; i < NUM_FEATURES; i++) {
    predicted_temp += temp_coef[i] * features[i];
  }
  
  // D·ª± ƒëo√°n ƒë·ªô ·∫©m
  predicted_hum = hum_intercept;
  for (int i = 0; i < NUM_FEATURES; i++) {
    predicted_hum += hum_coef[i] * features[i];
  }
  
  // Ki·ªÉm tra gi√° tr·ªã d·ª± ƒëo√°n h·ª£p l√Ω
  if (isnan(predicted_temp) || predicted_temp < 0 || predicted_temp > 50) {
    Serial.println("‚ö†Ô∏è D·ª± ƒëo√°n nhi·ªát ƒë·ªô kh√¥ng h·ª£p l√Ω, s·ª≠ d·ª•ng d·ª± ƒëo√°n ƒë∆°n gi·∫£n");
    predicted_temp = 0.7 * last_t_api + 0.3 * last_t_dht;
  }
  
  if (isnan(predicted_hum) || predicted_hum < 0 || predicted_hum > 100) {
    Serial.println("‚ö†Ô∏è D·ª± ƒëo√°n ƒë·ªô ·∫©m kh√¥ng h·ª£p l√Ω, s·ª≠ d·ª•ng d·ª± ƒëo√°n ƒë∆°n gi·∫£n");
    predicted_hum = 0.7 * last_h_api + 0.3 * last_h_dht;
  }
  
  // ƒê·∫£m b·∫£o k·∫øt qu·∫£ n·∫±m trong ph·∫°m vi h·ª£p l√Ω
  predicted_temp = constrain(predicted_temp, 0, 50);
  predicted_hum = constrain(predicted_hum, 0, 100);
  
  // Hi·ªÉn th·ªã k·∫øt qu·∫£ d·ª± ƒëo√°n chi ti·∫øt
  Serial.println("\n=== K·∫æT QU·∫¢ D·ª∞ ƒêO√ÅN ===");
  Serial.printf("üîÆ D·ª± ƒëo√°n (1 gi·ªù t·ªõi): %.1f¬∞C, %.1f%%\n", predicted_temp, predicted_hum);
  
  // So s√°nh v·ªõi gi√° tr·ªã hi·ªán t·∫°i
  Serial.println("\nüìä So s√°nh v·ªõi gi√° tr·ªã hi·ªán t·∫°i:");
  Serial.printf("- Nhi·ªát ƒë·ªô hi·ªán t·∫°i: %.1f¬∞C -> D·ª± ƒëo√°n: %.1f¬∞C (thay ƒë·ªïi: %.1f¬∞C)\n", 
                last_t_dht, predicted_temp, predicted_temp - last_t_dht);
  Serial.printf("- ƒê·ªô ·∫©m hi·ªán t·∫°i: %.1f%% -> D·ª± ƒëo√°n: %.1f%% (thay ƒë·ªïi: %.1f%%)\n", 
                last_h_dht, predicted_hum, predicted_hum - last_h_dht);
  
  // So s√°nh v·ªõi gi√° tr·ªã API
  Serial.println("\nüåê So s√°nh v·ªõi d·ªØ li·ªáu API:");
  Serial.printf("- Nhi·ªát ƒë·ªô API: %.1f¬∞C -> D·ª± ƒëo√°n: %.1f¬∞C (ch√™nh l·ªách: %.1f¬∞C)\n", 
                last_t_api, predicted_temp, predicted_temp - last_t_api);
  Serial.printf("- ƒê·ªô ·∫©m API: %.1f%% -> D·ª± ƒëo√°n: %.1f%% (ch√™nh l·ªách: %.1f%%)\n", 
                last_h_api, predicted_hum, predicted_hum - last_h_api);
  
  // So s√°nh v·ªõi ng∆∞·ª°ng
  Serial.println("\n‚ö†Ô∏è So s√°nh v·ªõi ng∆∞·ª°ng c·∫£nh b√°o:");
  Serial.printf("- Nhi·ªát ƒë·ªô d·ª± ƒëo√°n: %.1f¬∞C %s Ng∆∞·ª°ng: %.1f¬∞C\n", 
                predicted_temp, 
                predicted_temp > TEMP_THRESHOLD ? ">" : "<=", 
                TEMP_THRESHOLD);
  Serial.printf("- ƒê·ªô ·∫©m d·ª± ƒëo√°n: %.1f%% %s Ng∆∞·ª°ng: %.1f%%\n", 
                predicted_hum, 
                predicted_hum > HUM_THRESHOLD ? ">" : "<=", 
                HUM_THRESHOLD);
  
  // Ki·ªÉm tra c·∫£nh b√°o d·ª± ƒëo√°n
  bool wasPredictedAlert = isPredictedAlert;
  isPredictedAlert = (predicted_temp > TEMP_THRESHOLD || predicted_hum > HUM_THRESHOLD);
  
  if (isPredictedAlert && !wasPredictedAlert) {
    Serial.println("\n‚ö†Ô∏è C·∫¢NH B√ÅO S·ªöM: D·ª± b√°o s·∫Ω v∆∞·ª£t ng∆∞·ª°ng trong 1 gi·ªù t·ªõi!");
    if (predicted_temp > TEMP_THRESHOLD) {
      Serial.printf("üî• Nhi·ªát ƒë·ªô d·ª± ƒëo√°n cao: %.1f¬∞C > %.1f¬∞C\n", predicted_temp, TEMP_THRESHOLD);
    }
    if (predicted_hum > HUM_THRESHOLD) {
      Serial.printf("üíß ƒê·ªô ·∫©m d·ª± ƒëo√°n cao: %.1f%% > %.1f%%\n", predicted_hum, HUM_THRESHOLD);
    }
  } else if (!isPredictedAlert && wasPredictedAlert) {
    Serial.println("\n‚úì D·ª± b√°o tr·ªü v·ªÅ m·ª©c b√¨nh th∆∞·ªùng");
  } else if (isPredictedAlert) {
    Serial.println("\n‚ö†Ô∏è V·∫´n trong t√¨nh tr·∫°ng c·∫£nh b√°o d·ª± ƒëo√°n!");
  } else {
    Serial.println("\n‚úì T√¨nh tr·∫°ng b√¨nh th∆∞·ªùng");
  }
}

// X·ª≠ l√Ω ƒë√®n LED d·ª±a tr√™n ƒëi·ªÅu ki·ªán d·ª± ƒëo√°n
void handleLED() {
  unsigned long currentMillis = millis();
  
  if (isPredictedAlert) {
    // Nh·∫•p nh√°y n·∫øu d·ª± ƒëo√°n v∆∞·ª£t ng∆∞·ª°ng
    if (currentMillis - lastBlinkTime >= 500) {
      lastBlinkTime = currentMillis;
      ledState = !ledState;
      digitalWrite(LED_PIN, ledState ? HIGH : LOW);
    }
  } else {
    // T·∫Øt LED n·∫øu m·ªçi th·ª© b√¨nh th∆∞·ªùng
    digitalWrite(LED_PIN, LOW);
    ledState = false;
  }
}